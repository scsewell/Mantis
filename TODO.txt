//--BUILD--
Create build script

//--GENERAL--
Memory Allocator
    * aligned allocator
    * single thread and multi-thread variants
    * override new/delete
    * debug info/tagging

Application
Input
Math
Random (Make thread safe)
Noise
Curve
Serialization (binary, json/xml)
Parallelization (Thread pool, jobs)
Profiler
Time
ECS

//--GEOMERTRY--
Color
Vectors
Matricies
Quaterion
Planes
Bounding Boxes
Ray
Rect

//--RENDERER--
pool semaphores/queues

Shader cache
transfer queues
pool fences/semaphores?
pool staging buffers (always keep them mapped, share between images and vertex/index/storage etc.)
look into resuing samplers (shared_ptr) for textures where possible
review command buffer pooling (for starters, should pool by queuefamilyindex rather than queuetype, since queuetypes might alias the same queuefamily)
upload image waits for each image one at a time, could batch them and have many fences waited on for all pending transfers...
pre-generate mipmaps

compute shader frustum culling?
debug drawing (use one buffer with all lines for the frame)